#!/usr/bin/ruby

base_path = File.expand_path File.join(File.dirname(__FILE__), '..')
$:.unshift File.join(base_path, 'lib')

require 'uri'
require 'onetime/api'
require 'drydock'

class Onetime::CLI
  class Definition
    extend Drydock

    default :share

    global :H, String, "Base URI (e.g. https://onetimesecret.com/api)"
    global :c, :custid, String, "Customer ID (e.g. you@yourcompany.com)"
    global :k, :apikey, String, "API key (e.g. 4eb33c6340006d6607c813fc7e707a32f8bf5342)"

    global :f, :format, String, "Output format (json or yaml)"
    global :j, :json, "Shorthand for -f json"
    global :y, :yaml, "Shorthand for -f yaml"
    global :s, :string, "Shorthand for -f string (default)"

    global :D, :debug do
      OT::API.debug_output STDERR
    end

    global :V, :version do
      puts OT::API::VERSION
      exit 0
    end

    before do |obj|
      OT::API.base_uri obj.global.H if obj.global.H
      @api = OT::API.new obj.global.custid, obj.global.apikey
      obj.global.format = 'yaml' if obj.global.yaml
      obj.global.format = 'json' if obj.global.json
      obj.global.format = 'string' if obj.global.string
      obj.global.format = nil if obj.global.format == 'string'
      if obj.global.format && !['json', 'yaml'].member?(obj.global.format)
        raise RuntimeError, "Unsupported format: #{obj.global.format}"
      end
      ## NOTE: Disabled checking for tty. Just assume string format.
      #if !STDOUT.tty? && !obj.global.format
      #  raise RuntimeError, "No tty. Must specify an output format. See #{$0} generate -h"
      #end
    end

    after do |obj|
      case obj.global.format
      when 'json'
        puts @res.to_json
      when 'yaml'
        puts @res.to_yaml
      end
    end

    usage "onetime status"
    command :status do |obj|
      @res = @api.get '/status'
      if @res.nil?
        raise RuntimeError, 'Could not complete request'
      elsif @api.response.code != 200
        raise RuntimeError, @res['message']
      end
      unless obj.global.format
        msg = @api.anonymous ? 'Anonymous' : @api.custid
        STDERR.puts '# Host: %s' % OT::API.base_uri
        STDERR.puts '# Account: %s' % msg
        puts 'Service Status: %s' % @res[:status]
      end
    end

    argv :key
    usage "onetime metadata <KEY>"
    command :metadata do |obj|
      raise RuntimeError, "csv not supported" if obj.global.format == 'csv'
      raise RuntimeError, "Usage: #{$0} metadata <KEY>" unless obj.argv.key
      @res = @api.post '/metadata/%s' % obj.argv.key
      if @res.nil?
        raise RuntimeError, 'Could not complete request'
      elsif @api.response.code != 200
        raise RuntimeError, @res['message']
      end
      unless obj.global.format
        puts @res.to_yaml
      end
    end

    option :p, :passphrase, String, "Passphrase to decrypt the secret (only required if one was provided to you)"
    argv :key
    usage "onetime secret <KEY>"
    usage "onetime secret [-p PASSPHRASE] <KEY>"
    command :secret do |obj|
      raise RuntimeError, "csv not supported" if obj.global.format == 'csv'
      raise RuntimeError, "Usage: #{$0} secret <KEY>" unless obj.argv.key
      opts = {}
      opts[:passphrase] = obj.option.passphrase if obj.option.passphrase
      base_uri = URI.parse Onetime::API.base_uri
      if obj.argv.key =~ /#{base_uri.hostname}\/secret\/([a-zA-Z0-9]+)/
        obj.argv.key = $1
      end
      @res = @api.post '/secret/%s' % [obj.argv.key], opts
      if @res.nil?
        raise RuntimeError, 'Could not complete request'
      elsif @api.response.code != 200
        raise RuntimeError, @res['message']
      end
      unless obj.global.format
        puts @res.to_yaml
      end
    end
    command_alias :secret, :get

    usage "onetime share"
    usage "onetime share [-t 3600] [-p PASSPHRASE]"
    usage "echo 'your secret' | onetime share"
    usage "<path/2/file onetime share"
    option :t, :ttl, Integer, "Time-to-live in seconds"
    option :p, :passphrase, String, "Passphrase to encrypt the secret (something only you and recipient know)"
    option :r, :recipient, Array, "Email address to deliver the secret link"
    command :share do |obj|
      begin
        if Kernel.select [$stdin], nil, nil, 0
          secret_value = STDIN.read
        else
          STDERR.puts "Paste message here (hit control-D to continue):"
          secret_value = ARGF.read
          STDERR.puts # new line to let the person know we got it.
        end
      rescue Interrupt => ex
        puts "Exiting..."
        exit 0
      end
      raise RuntimeError, "No secret provided" if secret_value.chomp.empty?
      opts = { :secret => secret_value, :ttl => obj.option.ttl, :recipient => obj.option.recipient }
      opts[:passphrase] = obj.option.passphrase if obj.option.passphrase
      @res = @api.post '/share', opts
      if @res.nil?
        raise RuntimeError, 'Could not complete request'
      elsif @api.response.code != 200
        raise RuntimeError, @res['message']
      end
      uri = OT::API.web_uri('secret', @res[:secret_key])
      if obj.global.format == 'csv' || obj.global.format.nil?
        if @res[:recipient] && !@res[:recipient].compact.empty?
          STDERR.puts '# Secret link sent to: %s' % @res[:recipient].join(',')
        else
          puts uri
        end
      end
    end

    usage "onetime generate"
    usage "onetime generate [-t 3600] [-p PASSPHRASE]"
    option :t, :ttl, Integer, "Time-to-live in seconds"
    option :p, :passphrase, String, "Passphrase to encrypt the secret (something only you and recipient know)"
    option :r, :recipient, Array, "Email address to deliver the secret link"
    command :generate do |obj|
      opts = { :ttl => obj.option.ttl, :recipient => obj.option.recipient }
      opts[:passphrase] = obj.option.passphrase if obj.option.passphrase
      @res = @api.post '/generate', opts
      if @res.nil?
        raise RuntimeError, 'Could not complete request'
      elsif @api.response.code != 200
        raise RuntimeError, @res['message']
      end
      uri, secret_value = OT::API.web_uri('secret', @res[:secret_key]), @res[:value]
      STDERR.puts @res.inspect if obj.global.debug
      if obj.global.format == 'csv'
        puts [secret_value,uri].join ','
      elsif obj.global.format.nil?
        msg = 'Your secret (hit return to continue): %s' % secret_value
        if @res[:recipient] && !@res[:recipient].compact.empty?
          uri = "\e[K\r# Secret link sent to: %s" % [@res[:recipient].join(',').ljust(40, ' ')]
        end
        eraser = "\e[K\r%s" % [uri]  # \e[K\r
        print msg
        # Check for tty b/c if we're receiving data via STDIN, even if
        # we're ignoring it, the stty commands return "stdin isn't a terminal"
        if STDIN.tty?
          begin
            old_stty = `stty -g`  # store tty settings
            system "stty -echo"
            STDIN.getc
          rescue Interrupt
          ensure
            system "stty echo"
            system "stty #{old_stty}" # restore stty settings
            print eraser
          end
        else
          puts
          print uri
        end
        puts
      end
    end

  end
end

begin
  Drydock.run! ARGV, STDIN
rescue RuntimeError => ex
  STDERR.puts ex.message
  exit 1
rescue => ex
  puts ex.message
  puts ex.backtrace
  exit 1
end
