#!/usr/bin/ruby

base_path = File.expand_path File.join(File.dirname(__FILE__), '..')
$:.unshift File.join(base_path, 'lib')

require 'onetime/api'
require 'drydock'

class Onetime::CLI
  class Definition
    extend Drydock
    
    default :share
    
    global :H, String, "Base URI (e.g. https://onetimesecret.com/api)"
    global :c, :custid, String, "Customer ID (e.g. you@yourcompany.com)"
    global :k, :apikey, String, "API key (e.g. 4eb33c6340006d6607c813fc7e707a32f8bf5342)"
    
    global :f, :format, String, "Output format (json or yaml)"
    global :j, :json, "Shorthand for -f json"
    global :y, :yaml, "Shorthand for -f yaml"
    
    global :D, :debug do
      OT::API.debug_output STDERR
    end
    
    global :V, :version do
      puts OT::API::VERSION
      exit 0
    end
    
    before do |obj|
      OT::API.base_uri obj.global.H if obj.global.H
      @api = OT::API.new obj.global.custid, obj.global.apikey
      obj.global.format = 'yaml' if obj.global.yaml
      obj.global.format = 'json' if obj.global.json
      obj.global.format = nil if obj.global.format == 'string'
      if obj.global.format && !['json', 'yaml', 'csv'].member?(obj.global.format)
        raise RuntimeError, "Unsupported format: #{obj.global.format}"
      end
      if !STDOUT.tty? && !obj.global.format
        raise RuntimeError, "No tty. Must specify an output format. See #{$0} generate -h"
      end
    end
    
    after do |obj|
      case obj.global.format
      when 'json'
        puts @res.to_json
      when 'yaml'
        puts @res.to_yaml
      end
    end
    
    command :status do |obj|
      @res = @api.get '/status'
      raise RuntimeError, 'Could not complete request' if @res.nil?
      unless obj.global.format
        puts @res[:status]
      end
    end
    
    argv :key
    command :metadata do |obj|
      raise RuntimeError, "csv not supported" if obj.global.format == 'csv'
      raise RuntimeError, "Usage: #{$0} metadata <KEY>" unless obj.argv.key
      @res = @api.post '/metadata/%s' % obj.argv.key
      raise RuntimeError, 'Could not complete request' if @res.nil?
      unless obj.global.format
        puts @res.to_yaml
      end
    end
    
    argv :key
    command :secret do |obj|
      raise RuntimeError, "csv not supported" if obj.global.format == 'csv'
      raise RuntimeError, "Usage: #{$0} secret <KEY>" unless obj.argv.key
      @res = @api.post '/secret/%s' % obj.argv.key
      raise RuntimeError, 'Could not complete request' if @res.nil?
      unless obj.global.format
        puts @res.to_yaml
      end
    end
    
    command :share do |obj|
      begin
        if Kernel.select [$stdin], nil, nil, 0
          secret_value = STDIN.read
        else
          STDERR.puts "Paste secret here (hit control-D to continue):"
          secret_value = ARGF.read
          STDERR.puts "Generating link..."
        end
      rescue Interrupt => ex
        puts "Exiting..."
        exit 0
      end
      raise RuntimeError, "No secret provided" if secret_value.chomp.empty?
      @res = @api.post '/share', :secret => secret_value
      raise RuntimeError, 'Could not complete request' if @res.nil?
      uri = OT::API.web_uri('secret', @res[:secret_key])
      if obj.global.format == 'csv' || obj.global.format.nil?
        puts uri
      end
    end
    
    command :generate do |obj|
      @res = @api.post '/generate'
      raise RuntimeError, 'Could not complete request' if @res.nil?
      uri, secret_value = OT::API.web_uri('secret', @res[:secret_key]), @res[:value]
      STDERR.puts @res.inspect if obj.global.debug
      if obj.global.format == 'csv'
        puts [secret_value,uri].join ','
      elsif obj.global.format.nil?
        msg = 'Your secret (hit return to continue): %s' % secret_value
        eraser = "\e[K\r%s" % [uri]  # \e[K\r
        print msg
        begin
          old_stty = `stty -g`  # store tty settings
          system "stty -echo"
          STDIN.getc
        rescue Interrupt
        ensure
          system "stty echo"
          system "stty #{old_stty}" # restore stty settings
          print eraser
        end
        puts
      end
    end
    
  end
end

begin
  Drydock.run! ARGV, STDIN
rescue RuntimeError => ex
  STDERR.puts ex.message
  exit 1
rescue => ex
  puts ex.message
  puts ex.backtrace
  exit 1
end
